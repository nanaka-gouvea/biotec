from unittest.case import TestCase
from src.spectrum import *
__author__ = 'natalia'


class SpectrumTest(TestCase):

    def test_theoretical_spectrum(self):
        lines = open("../data/theoretical_spectrum.txt").read().splitlines()
        ts = theoretical_spectrum(lines[0], True)
        self.assertEqual(ts, [int(x) for x in lines[1].split(" ")])

    def test_linear_nqel(self):
        result = find_linear_peptides_by_spectrum([0, 113, 114, 128, 129, 242, 242, 257, 370, 371, 484])
        self.assertTrue("NQEL" in result)

    def test_cycle_smallest(self):
        result = find_cyclic_peptides_by_spectrum([0, 57, 71, 128])
        self.assertEqual(['AG', 'GA'], result)

    def test_cycle_nqel(self):
        result = find_cyclic_peptides_by_spectrum([0, 113, 114, 128, 129, 227, 242, 242, 257, 355, 356, 370, 371, 484])
        self.assertTrue("NQEL" in result)

    def test_negative_cycle_nqel(self):
        result = find_cyclic_peptides_by_spectrum([0, 113, 114, 128, 129, 242, 242, 257, 370, 371, 484])
        self.assertTrue("NQEL" not in result)

    def test_find_cyclic_tyrocidine(self):
        s_spec = re.compile("\s+").split("0	97	99	113	114	128	128	147	147	163	186	227	241	242	244 260	261	262	283	291	333	340	357	388	389	390	390	405	430	430 447	485	487	503	504	518	543	544	552	575	577	584	631	632	650 651	671	672	690	691	738	745	747	770	778	779	804	818	819	835 837	875	892	892	917	932	932	933	934	965	982	989	1031	1039	1060 1061	1062	1078	1080	1081	1095	1136	1159	1175	1175	1194	1194	1208	1209	1223 1225	1322")
        spectrum = [int(x) for x in s_spec]
        result = find_cyclic_peptides_by_spectrum(spectrum)
        expected = ['FIKVYKNFWP', 'FIKVYQNFWP', 'FIQVYKNFWP', 'FIQVYQNFWP', 'FLKVYKNFWP', 'FLKVYQNFWP', 'FLQVYKNFWP', 'FLQVYQNFWP', 'FNKYVKIFPW', 'FNKYVKLFPW', 'FNKYVQIFPW', 'FNKYVQLFPW', 'FNQYVKIFPW', 'FNQYVKLFPW', 'FNQYVQIFPW', 'FNQYVQLFPW', 'FPWFNKYVKI', 'FPWFNKYVKL', 'FPWFNKYVQI', 'FPWFNKYVQL', 'FPWFNQYVKI', 'FPWFNQYVKL', 'FPWFNQYVQI', 'FPWFNQYVQL', 'FWPFIKVYKN', 'FWPFIKVYQN', 'FWPFIQVYKN', 'FWPFIQVYQN', 'FWPFLKVYKN', 'FWPFLKVYQN', 'FWPFLQVYKN', 'FWPFLQVYQN', 'IFPWFNKYVK', 'IFPWFNKYVQ', 'IFPWFNQYVK', 'IFPWFNQYVQ', 'IKVYKNFWPF', 'IKVYQNFWPF', 'IQVYKNFWPF', 'IQVYQNFWPF', 'KIFPWFNKYV', 'KIFPWFNQYV', 'KLFPWFNKYV', 'KLFPWFNQYV', 'KNFWPFIKVY', 'KNFWPFIQVY', 'KNFWPFLKVY', 'KNFWPFLQVY', 'KVYKNFWPFI', 'KVYKNFWPFL', 'KVYQNFWPFI', 'KVYQNFWPFL', 'KYVKIFPWFN', 'KYVKLFPWFN', 'KYVQIFPWFN', 'KYVQLFPWFN', 'LFPWFNKYVK', 'LFPWFNKYVQ', 'LFPWFNQYVK', 'LFPWFNQYVQ', 'LKVYKNFWPF', 'LKVYQNFWPF', 'LQVYKNFWPF', 'LQVYQNFWPF', 'NFWPFIKVYK', 'NFWPFIKVYQ', 'NFWPFIQVYK', 'NFWPFIQVYQ', 'NFWPFLKVYK', 'NFWPFLKVYQ', 'NFWPFLQVYK', 'NFWPFLQVYQ', 'NKYVKIFPWF', 'NKYVKLFPWF', 'NKYVQIFPWF', 'NKYVQLFPWF', 'NQYVKIFPWF', 'NQYVKLFPWF', 'NQYVQIFPWF', 'NQYVQLFPWF', 'QIFPWFNKYV', 'QIFPWFNQYV', 'QLFPWFNKYV', 'QLFPWFNQYV', 'QNFWPFIKVY', 'QNFWPFIQVY', 'QNFWPFLKVY', 'QNFWPFLQVY', 'QVYKNFWPFI', 'QVYKNFWPFL', 'QVYQNFWPFI', 'QVYQNFWPFL', 'QYVKIFPWFN', 'QYVKLFPWFN', 'QYVQIFPWFN', 'QYVQLFPWFN', 'PFIKVYKNFW', 'PFIKVYQNFW', 'PFIQVYKNFW', 'PFIQVYQNFW', 'PFLKVYKNFW', 'PFLKVYQNFW', 'PFLQVYKNFW', 'PFLQVYQNFW', 'PWFNKYVKIF', 'PWFNKYVKLF', 'PWFNKYVQIF', 'PWFNKYVQLF', 'PWFNQYVKIF', 'PWFNQYVKLF', 'PWFNQYVQIF', 'PWFNQYVQLF', 'WFNKYVKIFP', 'WFNKYVKLFP', 'WFNKYVQIFP', 'WFNKYVQLFP', 'WFNQYVKIFP', 'WFNQYVKLFP', 'WFNQYVQIFP', 'WFNQYVQLFP', 'WPFIKVYKNF', 'WPFIKVYQNF', 'WPFIQVYKNF', 'WPFIQVYQNF', 'WPFLKVYKNF', 'WPFLKVYQNF', 'WPFLQVYKNF', 'WPFLQVYQNF', 'VKIFPWFNKY', 'VKIFPWFNQY', 'VKLFPWFNKY', 'VKLFPWFNQY', 'VQIFPWFNKY', 'VQIFPWFNQY', 'VQLFPWFNKY', 'VQLFPWFNQY', 'VYKNFWPFIK', 'VYKNFWPFIQ', 'VYKNFWPFLK', 'VYKNFWPFLQ', 'VYQNFWPFIK', 'VYQNFWPFIQ', 'VYQNFWPFLK', 'VYQNFWPFLQ', 'YKNFWPFIKV', 'YKNFWPFIQV', 'YKNFWPFLKV', 'YKNFWPFLQV', 'YQNFWPFIKV', 'YQNFWPFIQV', 'YQNFWPFLKV', 'YQNFWPFLQV', 'YVKIFPWFNK', 'YVKIFPWFNQ', 'YVKLFPWFNK', 'YVKLFPWFNQ', 'YVQIFPWFNK', 'YVQIFPWFNQ', 'YVQLFPWFNK', 'YVQLFPWFNQ']
        self.assertEqual(set(expected), set(result))
        self.assertTrue('VKLFPWFNQY' in result)